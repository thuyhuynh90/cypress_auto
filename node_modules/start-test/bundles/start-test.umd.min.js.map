{"version":3,"sources":["../../../projects/start-test/src/lib/start-test.service.ts","../../../projects/start-test/src/lib/start-test.component.ts","../../../projects/start-test/src/lib/start-test.module.ts"],"names":["Injectable","args","providedIn","StartTestComponent","fb","this","ansFilling","outputFunction","EventEmitter","sectionsForm","prototype","ngOnInit","_this","timeUp","subscribe","resp","submt","createTest","initForm","qid","code","group","q","ans","review","cAns","i","formsData","finalDataList","inputForm","id","testSheet","sections","forEach","sec","finalData","Object","push","types","typs","opts","secTypes","qType","optType","tmp_i","optCount","String","fromCharCode","info","name","to","from","consider","fid","secId","opt","cutMarks","marks","addControl","array","console","log","t","assign","value","emit","Component","selector","template","FormBuilder","Input","Output","NgModule","declarations","imports","CommonModule","RadioButtonModule","TabViewModule","MultiSelectModule","FormsModule","ReactiveFormsModule","CheckboxModule","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StartTestService {\n\n  constructor() { }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { Subject } from 'rxjs';\n\n@Component({\n  selector: 'start-test',\n  templateUrl: './start-test.component.html',\n  styleUrls: ['./start-test.component.css']\n})\nexport class StartTestComponent implements OnInit {\n\n  @Input('testSheet') testSheet: any;\n  @Input('ansFilling') ansFilling: boolean = false;\n  @Input('timeUp') timeUp: Subject<boolean>;\n  @Output('outputFunction') outputFunction: EventEmitter<any> = new EventEmitter();\n\n  finalDataList: any;\n\n  sectionsForm: FormGroup[] = [];\n  inputForm: FormGroup;\n  \n  constructor(private fb: FormBuilder) { }\n\n  ngOnInit(): void {\n    this.timeUp.subscribe(resp =>{\n      if(resp){\n        this.submt();\n      }\n    });\n    this.createTest();\n  }\n\n  initForm(qid: any, code: any = ''){\n    return this.fb.group({\n\t\t\tq: [qid],\n      ans: [],\n      review: [false],\n      cAns: [null]\n    });\n  }\n  createTest(){\n    let i = 1, j = 0;\n    let formsData = [];\n    this.finalDataList = []; \n    this.inputForm = this.fb.group({\n\t\t\tid: [this.testSheet.id],\n    });\n    this.testSheet.sections.forEach(sec => {\n      let finalData: any = new Object();\n      this.finalDataList.push(finalData);\n      finalData.sec = sec.sec;\n      finalData.formsData = [];\n      sec.types.forEach(typs => {\n        let opts: any = [];\n        let secTypes: any = new Object();\n        finalData.formsData.push(secTypes);\n        secTypes.formsData = [];\n        if(typs.qType.code != \"INPUT\"){\n          if(typs.optType == \"number\"){\n            for(let tmp_i = 1; tmp_i <= typs.optCount; tmp_i++){\n              opts.push(tmp_i);\n            }\n          } else {\n            for(let tmp_i = 1; tmp_i <= typs.optCount; tmp_i++){\n              opts.push(String.fromCharCode(tmp_i+64));\n            }\n          }\n        } else {\n          opts = 'input';\n        }\n        secTypes.info = `${typs.qType.name}.`;\n        if((typs.to - typs.from + 1) != typs.consider){\n          secTypes.info = `${secTypes.info} Only first ${typs.consider} answers will be evaluated.`;\n        } else {\n          secTypes.info = `${secTypes.info} All Questions Are Mandatory.`;\n        }\n        for(let tmp_i = typs.from; tmp_i <= typs.to; tmp_i++){\n          let fid: any = this.initForm(`${sec.secId}-${i}`, typs.qType.code);\n          formsData.push(fid);\n          secTypes.formsData.push({\n            'id': fid,\n            'q': i++,\n            'opt': opts,\n            'qType': typs.qType.code,\n            'cutMarks': typs.cutMarks,\n            'marks': typs.marks\n          });\n        }\n      });\n    });\n    this.sectionsForm = formsData;\n    this.inputForm.addControl(\"sections\", this.fb.array(this.sectionsForm));\n    console.log(this.finalDataList);\n  }\n\n  submt(){\n    //let t = Object.assign({}, (this.fb.array(this.sectionsForm)).value);\n    let t = Object.assign({}, this.inputForm.value);\n    console.log(t);\n    this.outputFunction.emit(t);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { StartTestComponent } from './start-test.component';\nimport { CommonModule } from '@angular/common';\nimport { RadioButtonModule } from 'primeng/radiobutton';\nimport { TabViewModule } from 'primeng/tabview';\nimport { MultiSelectModule } from 'primeng/multiselect';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CheckboxModule } from 'primeng/checkbox';\n\n@NgModule({\n  declarations: [\n    StartTestComponent\n  ],\n  imports: [\n    CommonModule,\n    RadioButtonModule,\n    TabViewModule,\n    MultiSelectModule,\n    FormsModule,\n    ReactiveFormsModule,\n    CheckboxModule\n  ],\n  exports: [\n    StartTestComponent\n  ]\n})\nexport class StartTestModule { }\n"]}