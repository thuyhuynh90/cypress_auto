(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/forms'), require('@angular/common'), require('primeng/radiobutton'), require('primeng/tabview'), require('primeng/multiselect'), require('primeng/checkbox')) :
    typeof define === 'function' && define.amd ? define('start-test', ['exports', '@angular/core', '@angular/forms', '@angular/common', 'primeng/radiobutton', 'primeng/tabview', 'primeng/multiselect', 'primeng/checkbox'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global['start-test'] = {}, global.ng.core, global.ng.forms, global.ng.common, global.radiobutton, global.tabview, global.multiselect, global.checkbox));
}(this, (function (exports, i0, forms, common, radiobutton, tabview, multiselect, checkbox) { 'use strict';

    var StartTestService = /** @class */ (function () {
        function StartTestService() {
        }
        return StartTestService;
    }());
    StartTestService.ɵprov = i0.ɵɵdefineInjectable({ factory: function StartTestService_Factory() { return new StartTestService(); }, token: StartTestService, providedIn: "root" });
    StartTestService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    StartTestService.ctorParameters = function () { return []; };

    var StartTestComponent = /** @class */ (function () {
        function StartTestComponent(fb) {
            this.fb = fb;
            this.ansFilling = false;
            this.outputFunction = new i0.EventEmitter();
            this.sectionsForm = [];
        }
        StartTestComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.timeUp.subscribe(function (resp) {
                if (resp) {
                    _this.submt();
                }
            });
            this.createTest();
        };
        StartTestComponent.prototype.initForm = function (qid, code) {
            if (code === void 0) { code = ''; }
            return this.fb.group({
                q: [qid],
                ans: [],
                review: [false],
                cAns: [null]
            });
        };
        StartTestComponent.prototype.createTest = function () {
            var _this = this;
            var i = 1, j = 0;
            var formsData = [];
            this.finalDataList = [];
            this.inputForm = this.fb.group({
                id: [this.testSheet.id],
            });
            this.testSheet.sections.forEach(function (sec) {
                var finalData = new Object();
                _this.finalDataList.push(finalData);
                finalData.sec = sec.sec;
                finalData.formsData = [];
                sec.types.forEach(function (typs) {
                    var opts = [];
                    var secTypes = new Object();
                    finalData.formsData.push(secTypes);
                    secTypes.formsData = [];
                    if (typs.qType.code != "INPUT") {
                        if (typs.optType == "number") {
                            for (var tmp_i = 1; tmp_i <= typs.optCount; tmp_i++) {
                                opts.push(tmp_i);
                            }
                        }
                        else {
                            for (var tmp_i = 1; tmp_i <= typs.optCount; tmp_i++) {
                                opts.push(String.fromCharCode(tmp_i + 64));
                            }
                        }
                    }
                    else {
                        opts = 'input';
                    }
                    secTypes.info = typs.qType.name + ".";
                    if ((typs.to - typs.from + 1) != typs.consider) {
                        secTypes.info = secTypes.info + " Only first " + typs.consider + " answers will be evaluated.";
                    }
                    else {
                        secTypes.info = secTypes.info + " All Questions Are Mandatory.";
                    }
                    for (var tmp_i = typs.from; tmp_i <= typs.to; tmp_i++) {
                        var fid = _this.initForm(sec.secId + "-" + i, typs.qType.code);
                        formsData.push(fid);
                        secTypes.formsData.push({
                            'id': fid,
                            'q': i++,
                            'opt': opts,
                            'qType': typs.qType.code,
                            'cutMarks': typs.cutMarks,
                            'marks': typs.marks
                        });
                    }
                });
            });
            this.sectionsForm = formsData;
            this.inputForm.addControl("sections", this.fb.array(this.sectionsForm));
            console.log(this.finalDataList);
        };
        StartTestComponent.prototype.submt = function () {
            //let t = Object.assign({}, (this.fb.array(this.sectionsForm)).value);
            var t = Object.assign({}, this.inputForm.value);
            console.log(t);
            this.outputFunction.emit(t);
        };
        return StartTestComponent;
    }());
    StartTestComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'start-test',
                    template: "<p-tabView *ngIf=\"finalDataList != undefined && finalDataList.length > 0\">\r\n    <p-tabPanel [header]=\"fdl.sec\" *ngFor=\"let fdl of finalDataList; let i = index\" [selected]=\"i == 0\">\r\n        <ng-template pTemplate=\"content\" class=\"pad-0 col-xs-12\">\r\n            <form class=\"form-inline\" [formGroup]=\"inputForm\" (ngSubmit)=\"f.form.valid; submt();\" #f=\"ngForm\">\r\n                <div *ngFor=\"let fd of fdl.formsData;\" class=\"pad-0 col-xs-12 item_box\">\r\n                    <div class=\"pad-1 note bottom-text col-xs-12\">{{fd.info}}</div>\r\n                    <span *ngFor=\"let qst of fd.formsData; let fi = index\">\r\n                        <div [formGroup]=\"qst.id\" class=\"container-fluid\" novalidate>\r\n                            <div class=\"pad-0 col-xs-7\" style=\"font-size: 16px;\">\r\n                                <div class=\"pad-0 col-xs-2 text-center\">\r\n                                    <span style=\"top: 3px; position: relative;\">{{qst.q}}.</span>\r\n                                </div>\r\n                                <div class=\"pad-0 col-xs-10 text-center radio-full\">\r\n                                    <span *ngIf=\"qst.qType == 'MCQ'\">\r\n                                        <label class=\"options\" *ngFor=\"let opt of qst.opt\">\r\n                                            <p-radioButton name=\"{{qst.q}}\" value=\"{{opt}}\" formControlName=\"ans\"></p-radioButton>\r\n                                            <span>{{opt}}</span>\r\n                                        </label>\r\n                                    </span>\r\n                                    <span *ngIf=\"qst.qType == 'MSQ'\">\r\n                                        <label class=\"options\" *ngFor=\"let opt of qst.opt; let k = index\">\r\n                                            <p-checkbox name=\"msq-{{qst.q}}-{{i}}\" value=\"{{opt}}\" checkboxIcon=\"white pi pi-circle-on\" \r\n                                            [formControl]=\"qst.id.controls['ans']\"></p-checkbox>\r\n                                            <span>{{opt}}</span>\r\n                                        </label>\r\n                                    </span>\r\n                                    <span *ngIf=\"qst.qType == 'INPUT'\">\r\n                                        <div class=\"col-xs-12 form-group\" style=\"margin-bottom: 6px;\">\r\n                                            <input type=\"number\" id=\"sec-{{qst.q}}-{{i}}\" autocomplete=\"off\" class=\"form-control\"\r\n                                            style=\"padding: 2px 7px; font-size: large;\" formControlName=\"ans\">\r\n                                        </div>\r\n                                    </span>\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"pad-0 col-xs-5 text-center a\" style=\"font-size: 14px;\">\r\n                                <span class=\"pull-left fa fa-remove\" style=\"top: 5px; position: relative;\"\r\n                                    (click)=\"qst.id.controls['ans'].setValue(null)\">Clear</span>\r\n                                <span class=\"pull-right fa fa {{qst.id.controls['review'].value ? 'fa-eye' : 'fa-eye-slash'}}\" style=\"top: 5px; position: relative;\"\r\n                                    (click)=\"qst.id.controls['review'].setValue(!qst.id.controls['review'].value)\">Review</span>\r\n                            </div>\r\n                        </div>\r\n                    </span>\r\n                </div>\r\n                <div class=\"pad-0 col-xs-12\">\r\n                    <div class=\"pad-0 col-xs-12\" style=\"padding-top: 15px; padding-bottom: 15px;\">\r\n                      <button type=\"submit\" class=\"search_btn train_Search\">Submit Test</button>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </ng-template>\r\n    </p-tabPanel>\r\n</p-tabView>",
                    styles: ["input[type=radio]{width:24px;height:24px;border-radius:12px;border:2px solid #1fbed6;background-color:#fff;-webkit-appearance:none;-moz-appearance:none}input[type=radio]:focus{outline:none}input[type=radio]:checked{background-color:#1fbed6}.ui-state-active~span:first-of-type,input[type=radio]:checked~span:first-of-type{color:#fff}label span:first-of-type{position:relative;left:-15px;color:#b9db00}label span{position:relative;top:1px}.ui-float-label>.ui-inputwrapper-filled~label,.ui-float-label>.ui-inputwrapper-focus~label,.ui-float-label>input.ui-state-filled~label,.ui-float-label>input:focus~label{top:-.75em;font-size:12px}"]
                },] }
    ];
    StartTestComponent.ctorParameters = function () { return [
        { type: forms.FormBuilder }
    ]; };
    StartTestComponent.propDecorators = {
        testSheet: [{ type: i0.Input, args: ['testSheet',] }],
        ansFilling: [{ type: i0.Input, args: ['ansFilling',] }],
        timeUp: [{ type: i0.Input, args: ['timeUp',] }],
        outputFunction: [{ type: i0.Output, args: ['outputFunction',] }]
    };

    var StartTestModule = /** @class */ (function () {
        function StartTestModule() {
        }
        return StartTestModule;
    }());
    StartTestModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [
                        StartTestComponent
                    ],
                    imports: [
                        common.CommonModule,
                        radiobutton.RadioButtonModule,
                        tabview.TabViewModule,
                        multiselect.MultiSelectModule,
                        forms.FormsModule,
                        forms.ReactiveFormsModule,
                        checkbox.CheckboxModule
                    ],
                    exports: [
                        StartTestComponent
                    ]
                },] }
    ];

    /*
     * Public API Surface of start-test
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.StartTestComponent = StartTestComponent;
    exports.StartTestModule = StartTestModule;
    exports.StartTestService = StartTestService;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=start-test.umd.js.map
