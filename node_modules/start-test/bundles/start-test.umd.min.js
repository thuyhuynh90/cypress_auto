!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("@angular/core"),require("@angular/forms"),require("@angular/common"),require("primeng/radiobutton"),require("primeng/tabview"),require("primeng/multiselect"),require("primeng/checkbox")):"function"==typeof define&&define.amd?define("start-test",["exports","@angular/core","@angular/forms","@angular/common","primeng/radiobutton","primeng/tabview","primeng/multiselect","primeng/checkbox"],e):e((t="undefined"!=typeof globalThis?globalThis:t||self)["start-test"]={},t.ng.core,t.ng.forms,t.ng.common,t.radiobutton,t.tabview,t.multiselect,t.checkbox)}(this,(function(t,e,o,n,r,i,s,a){"use strict";var l=function(){};l.ɵprov=e.ɵɵdefineInjectable({factory:function(){return new l},token:l,providedIn:"root"}),l.decorators=[{type:e.Injectable,args:[{providedIn:"root"}]}],l.ctorParameters=function(){return[]};var p=function(){function t(t){this.fb=t,this.ansFilling=!1,this.outputFunction=new e.EventEmitter,this.sectionsForm=[]}return t.prototype.ngOnInit=function(){var t=this;this.timeUp.subscribe((function(e){e&&t.submt()})),this.createTest()},t.prototype.initForm=function(t,e){return void 0===e&&(e=""),this.fb.group({q:[t],ans:[],review:[!1],cAns:[null]})},t.prototype.createTest=function(){var t=this,e=1,o=[];this.finalDataList=[],this.inputForm=this.fb.group({id:[this.testSheet.id]}),this.testSheet.sections.forEach((function(n){var r=new Object;t.finalDataList.push(r),r.sec=n.sec,r.formsData=[],n.types.forEach((function(i){var s=[],a=new Object;if(r.formsData.push(a),a.formsData=[],"INPUT"!=i.qType.code)if("number"==i.optType)for(var l=1;l<=i.optCount;l++)s.push(l);else for(l=1;l<=i.optCount;l++)s.push(String.fromCharCode(l+64));else s="input";a.info=i.qType.name+".",i.to-i.from+1!=i.consider?a.info=a.info+" Only first "+i.consider+" answers will be evaluated.":a.info=a.info+" All Questions Are Mandatory.";for(l=i.from;l<=i.to;l++){var p=t.initForm(n.secId+"-"+e,i.qType.code);o.push(p),a.formsData.push({id:p,q:e++,opt:s,qType:i.qType.code,cutMarks:i.cutMarks,marks:i.marks})}}))})),this.sectionsForm=o,this.inputForm.addControl("sections",this.fb.array(this.sectionsForm)),console.log(this.finalDataList)},t.prototype.submt=function(){var t=Object.assign({},this.inputForm.value);console.log(t),this.outputFunction.emit(t)},t}();p.decorators=[{type:e.Component,args:[{selector:"start-test",template:'<p-tabView *ngIf="finalDataList != undefined && finalDataList.length > 0">\r\n    <p-tabPanel [header]="fdl.sec" *ngFor="let fdl of finalDataList; let i = index" [selected]="i == 0">\r\n        <ng-template pTemplate="content" class="pad-0 col-xs-12">\r\n            <form class="form-inline" [formGroup]="inputForm" (ngSubmit)="f.form.valid; submt();" #f="ngForm">\r\n                <div *ngFor="let fd of fdl.formsData;" class="pad-0 col-xs-12 item_box">\r\n                    <div class="pad-1 note bottom-text col-xs-12">{{fd.info}}</div>\r\n                    <span *ngFor="let qst of fd.formsData; let fi = index">\r\n                        <div [formGroup]="qst.id" class="container-fluid" novalidate>\r\n                            <div class="pad-0 col-xs-7" style="font-size: 16px;">\r\n                                <div class="pad-0 col-xs-2 text-center">\r\n                                    <span style="top: 3px; position: relative;">{{qst.q}}.</span>\r\n                                </div>\r\n                                <div class="pad-0 col-xs-10 text-center radio-full">\r\n                                    <span *ngIf="qst.qType == \'MCQ\'">\r\n                                        <label class="options" *ngFor="let opt of qst.opt">\r\n                                            <p-radioButton name="{{qst.q}}" value="{{opt}}" formControlName="ans"></p-radioButton>\r\n                                            <span>{{opt}}</span>\r\n                                        </label>\r\n                                    </span>\r\n                                    <span *ngIf="qst.qType == \'MSQ\'">\r\n                                        <label class="options" *ngFor="let opt of qst.opt; let k = index">\r\n                                            <p-checkbox name="msq-{{qst.q}}-{{i}}" value="{{opt}}" checkboxIcon="white pi pi-circle-on" \r\n                                            [formControl]="qst.id.controls[\'ans\']"></p-checkbox>\r\n                                            <span>{{opt}}</span>\r\n                                        </label>\r\n                                    </span>\r\n                                    <span *ngIf="qst.qType == \'INPUT\'">\r\n                                        <div class="col-xs-12 form-group" style="margin-bottom: 6px;">\r\n                                            <input type="number" id="sec-{{qst.q}}-{{i}}" autocomplete="off" class="form-control"\r\n                                            style="padding: 2px 7px; font-size: large;" formControlName="ans">\r\n                                        </div>\r\n                                    </span>\r\n                                </div>\r\n                            </div>\r\n                            <div class="pad-0 col-xs-5 text-center a" style="font-size: 14px;">\r\n                                <span class="pull-left fa fa-remove" style="top: 5px; position: relative;"\r\n                                    (click)="qst.id.controls[\'ans\'].setValue(null)">Clear</span>\r\n                                <span class="pull-right fa fa {{qst.id.controls[\'review\'].value ? \'fa-eye\' : \'fa-eye-slash\'}}" style="top: 5px; position: relative;"\r\n                                    (click)="qst.id.controls[\'review\'].setValue(!qst.id.controls[\'review\'].value)">Review</span>\r\n                            </div>\r\n                        </div>\r\n                    </span>\r\n                </div>\r\n                <div class="pad-0 col-xs-12">\r\n                    <div class="pad-0 col-xs-12" style="padding-top: 15px; padding-bottom: 15px;">\r\n                      <button type="submit" class="search_btn train_Search">Submit Test</button>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </ng-template>\r\n    </p-tabPanel>\r\n</p-tabView>',styles:["input[type=radio]{width:24px;height:24px;border-radius:12px;border:2px solid #1fbed6;background-color:#fff;-webkit-appearance:none;-moz-appearance:none}input[type=radio]:focus{outline:none}input[type=radio]:checked{background-color:#1fbed6}.ui-state-active~span:first-of-type,input[type=radio]:checked~span:first-of-type{color:#fff}label span:first-of-type{position:relative;left:-15px;color:#b9db00}label span{position:relative;top:1px}.ui-float-label>.ui-inputwrapper-filled~label,.ui-float-label>.ui-inputwrapper-focus~label,.ui-float-label>input.ui-state-filled~label,.ui-float-label>input:focus~label{top:-.75em;font-size:12px}"]}]}],p.ctorParameters=function(){return[{type:o.FormBuilder}]},p.propDecorators={testSheet:[{type:e.Input,args:["testSheet"]}],ansFilling:[{type:e.Input,args:["ansFilling"]}],timeUp:[{type:e.Input,args:["timeUp"]}],outputFunction:[{type:e.Output,args:["outputFunction"]}]};var c=function(){};c.decorators=[{type:e.NgModule,args:[{declarations:[p],imports:[n.CommonModule,r.RadioButtonModule,i.TabViewModule,s.MultiSelectModule,o.FormsModule,o.ReactiveFormsModule,a.CheckboxModule],exports:[p]}]}],t.StartTestComponent=p,t.StartTestModule=c,t.StartTestService=l,Object.defineProperty(t,"__esModule",{value:!0})}));
//# sourceMappingURL=start-test.umd.min.js.map