import { Component, EventEmitter, Input, Output } from '@angular/core';
import { FormBuilder } from '@angular/forms';
export class StartTestComponent {
    constructor(fb) {
        this.fb = fb;
        this.ansFilling = false;
        this.outputFunction = new EventEmitter();
        this.sectionsForm = [];
    }
    ngOnInit() {
        this.timeUp.subscribe(resp => {
            if (resp) {
                this.submt();
            }
        });
        this.createTest();
    }
    initForm(qid, code = '') {
        return this.fb.group({
            q: [qid],
            ans: [],
            review: [false],
            cAns: [null]
        });
    }
    createTest() {
        let i = 1, j = 0;
        let formsData = [];
        this.finalDataList = [];
        this.inputForm = this.fb.group({
            id: [this.testSheet.id],
        });
        this.testSheet.sections.forEach(sec => {
            let finalData = new Object();
            this.finalDataList.push(finalData);
            finalData.sec = sec.sec;
            finalData.formsData = [];
            sec.types.forEach(typs => {
                let opts = [];
                let secTypes = new Object();
                finalData.formsData.push(secTypes);
                secTypes.formsData = [];
                if (typs.qType.code != "INPUT") {
                    if (typs.optType == "number") {
                        for (let tmp_i = 1; tmp_i <= typs.optCount; tmp_i++) {
                            opts.push(tmp_i);
                        }
                    }
                    else {
                        for (let tmp_i = 1; tmp_i <= typs.optCount; tmp_i++) {
                            opts.push(String.fromCharCode(tmp_i + 64));
                        }
                    }
                }
                else {
                    opts = 'input';
                }
                secTypes.info = `${typs.qType.name}.`;
                if ((typs.to - typs.from + 1) != typs.consider) {
                    secTypes.info = `${secTypes.info} Only first ${typs.consider} answers will be evaluated.`;
                }
                else {
                    secTypes.info = `${secTypes.info} All Questions Are Mandatory.`;
                }
                for (let tmp_i = typs.from; tmp_i <= typs.to; tmp_i++) {
                    let fid = this.initForm(`${sec.secId}-${i}`, typs.qType.code);
                    formsData.push(fid);
                    secTypes.formsData.push({
                        'id': fid,
                        'q': i++,
                        'opt': opts,
                        'qType': typs.qType.code,
                        'cutMarks': typs.cutMarks,
                        'marks': typs.marks
                    });
                }
            });
        });
        this.sectionsForm = formsData;
        this.inputForm.addControl("sections", this.fb.array(this.sectionsForm));
        console.log(this.finalDataList);
    }
    submt() {
        //let t = Object.assign({}, (this.fb.array(this.sectionsForm)).value);
        let t = Object.assign({}, this.inputForm.value);
        console.log(t);
        this.outputFunction.emit(t);
    }
}
StartTestComponent.decorators = [
    { type: Component, args: [{
                selector: 'start-test',
                template: "<p-tabView *ngIf=\"finalDataList != undefined && finalDataList.length > 0\">\r\n    <p-tabPanel [header]=\"fdl.sec\" *ngFor=\"let fdl of finalDataList; let i = index\" [selected]=\"i == 0\">\r\n        <ng-template pTemplate=\"content\" class=\"pad-0 col-xs-12\">\r\n            <form class=\"form-inline\" [formGroup]=\"inputForm\" (ngSubmit)=\"f.form.valid; submt();\" #f=\"ngForm\">\r\n                <div *ngFor=\"let fd of fdl.formsData;\" class=\"pad-0 col-xs-12 item_box\">\r\n                    <div class=\"pad-1 note bottom-text col-xs-12\">{{fd.info}}</div>\r\n                    <span *ngFor=\"let qst of fd.formsData; let fi = index\">\r\n                        <div [formGroup]=\"qst.id\" class=\"container-fluid\" novalidate>\r\n                            <div class=\"pad-0 col-xs-7\" style=\"font-size: 16px;\">\r\n                                <div class=\"pad-0 col-xs-2 text-center\">\r\n                                    <span style=\"top: 3px; position: relative;\">{{qst.q}}.</span>\r\n                                </div>\r\n                                <div class=\"pad-0 col-xs-10 text-center radio-full\">\r\n                                    <span *ngIf=\"qst.qType == 'MCQ'\">\r\n                                        <label class=\"options\" *ngFor=\"let opt of qst.opt\">\r\n                                            <p-radioButton name=\"{{qst.q}}\" value=\"{{opt}}\" formControlName=\"ans\"></p-radioButton>\r\n                                            <span>{{opt}}</span>\r\n                                        </label>\r\n                                    </span>\r\n                                    <span *ngIf=\"qst.qType == 'MSQ'\">\r\n                                        <label class=\"options\" *ngFor=\"let opt of qst.opt; let k = index\">\r\n                                            <p-checkbox name=\"msq-{{qst.q}}-{{i}}\" value=\"{{opt}}\" checkboxIcon=\"white pi pi-circle-on\" \r\n                                            [formControl]=\"qst.id.controls['ans']\"></p-checkbox>\r\n                                            <span>{{opt}}</span>\r\n                                        </label>\r\n                                    </span>\r\n                                    <span *ngIf=\"qst.qType == 'INPUT'\">\r\n                                        <div class=\"col-xs-12 form-group\" style=\"margin-bottom: 6px;\">\r\n                                            <input type=\"number\" id=\"sec-{{qst.q}}-{{i}}\" autocomplete=\"off\" class=\"form-control\"\r\n                                            style=\"padding: 2px 7px; font-size: large;\" formControlName=\"ans\">\r\n                                        </div>\r\n                                    </span>\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"pad-0 col-xs-5 text-center a\" style=\"font-size: 14px;\">\r\n                                <span class=\"pull-left fa fa-remove\" style=\"top: 5px; position: relative;\"\r\n                                    (click)=\"qst.id.controls['ans'].setValue(null)\">Clear</span>\r\n                                <span class=\"pull-right fa fa {{qst.id.controls['review'].value ? 'fa-eye' : 'fa-eye-slash'}}\" style=\"top: 5px; position: relative;\"\r\n                                    (click)=\"qst.id.controls['review'].setValue(!qst.id.controls['review'].value)\">Review</span>\r\n                            </div>\r\n                        </div>\r\n                    </span>\r\n                </div>\r\n                <div class=\"pad-0 col-xs-12\">\r\n                    <div class=\"pad-0 col-xs-12\" style=\"padding-top: 15px; padding-bottom: 15px;\">\r\n                      <button type=\"submit\" class=\"search_btn train_Search\">Submit Test</button>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </ng-template>\r\n    </p-tabPanel>\r\n</p-tabView>",
                styles: ["input[type=radio]{width:24px;height:24px;border-radius:12px;border:2px solid #1fbed6;background-color:#fff;-webkit-appearance:none;-moz-appearance:none}input[type=radio]:focus{outline:none}input[type=radio]:checked{background-color:#1fbed6}.ui-state-active~span:first-of-type,input[type=radio]:checked~span:first-of-type{color:#fff}label span:first-of-type{position:relative;left:-15px;color:#b9db00}label span{position:relative;top:1px}.ui-float-label>.ui-inputwrapper-filled~label,.ui-float-label>.ui-inputwrapper-focus~label,.ui-float-label>input.ui-state-filled~label,.ui-float-label>input:focus~label{top:-.75em;font-size:12px}"]
            },] }
];
StartTestComponent.ctorParameters = () => [
    { type: FormBuilder }
];
StartTestComponent.propDecorators = {
    testSheet: [{ type: Input, args: ['testSheet',] }],
    ansFilling: [{ type: Input, args: ['ansFilling',] }],
    timeUp: [{ type: Input, args: ['timeUp',] }],
    outputFunction: [{ type: Output, args: ['outputFunction',] }]
};
//# sourceMappingURL=data:application/json;base64,